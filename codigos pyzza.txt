pyzza projeto faculdade

models.py
from django.db import models
import uuid

from django.db import models
import uuid

class Base(models.Model):
    criacao = models.DateTimeField(auto_now_add=True)
    atualizacao = models.DateTimeField(auto_now=True)
    ativo = models.BooleanField(default=True)

    class Meta:
        abstract = True


class Produto(Base):
    id = models.UUIDField(default=uuid.uuid4(), primary_key=True, editable=False)
    nome = models.CharField('Nome do Produto', max_length=100, help_text='nome do produto')
    categoria = models.CharField('Categoria', max_length=200, help_text='Ex: frios, massas')
    preco = models.DecimalField('Preço', max_digits=8, decimal_places=2, help_text='R$')
    medida = models.CharField('Medida', max_length=2, help_text='Ex: kg, Un')
    estoqueatual = models.IntegerField('Estoque Atual')
    estoqueminimo = models.IntegerField('Estoque Minimo')
    nomeempresa = models.CharField('Nome da Empresa', max_length=100)
    situacaoestoque = models.CharField('Situação do Estoque', max_length=100, help_text='Ex: Regular/Negativo')

    class Meta:
        unique_together = ('nome', 'nomeempresa',)

    def __str__(self):
        return self.nomeempresa


class Fornecedor(Base):
    empresa = models.ForeignKey(Produto,  on_delete=models.CASCADE)
    cnpj = models.CharField('CNPJ', max_length=18)
    telefone = models.CharField('Telefone', max_length=12, help_text='Digite o numero do Telefone')
    email = models.EmailField('E-mail', max_length=100, help_text='Digite seu email')

    class Meta:
        verbose_name_plural = 'Fornecedores'
        unique_together = ('empresa', 'cnpj', 'telefone', 'email',)


class SituacaoEstoque(models.Model):
    pass


class RepresentanteComercial(Base):
    empresa = models.OneToOneField(Produto, on_delete=models.CASCADE)
    nomecontato = models.CharField('Nome do Representante', max_length=100)
    endereco = models.CharField('Endereço', max_length=100)
    bairro = models.CharField('Bairro', max_length=100)
    cep = models.CharField('CEP', max_length=10)
    cidade = models.CharField('Cidade', max_length=20)
    estado = models.CharField('Estado', max_length=2)
    cpf = models.CharField('CPF', max_length=20)

    class Meta:
        verbose_name_plural = 'Representantes Comerciais'
        unique_together = ('nomecontato', 'endereco', 'cpf',)

    def __str__(self):
        return self.nomecontato



#admin.py
from django.contrib import admin
from .models import Produto, Fornecedor, RepresentanteComercial


@admin.register(Produto)
class ProdutoAdmin(admin.ModelAdmin):
    list_display = ('nome', 'categoria', 'preco', 'medida', 'estoqueatual', 'nomeempresa', 'situacaoestoque',)

    def nome(self, instance):
        return f'{instance.nome.get_full_name()}'


@admin.register(RepresentanteComercial)
class RepresentanteComercialAdmin(admin.ModelAdmin):
    list_display = ('nomecontato', 'empresa', 'endereco', 'bairro', 'cep', 'cidade', 'estado', 'cpf',)

    def nomecontato(self, instance):
        return f'{instance.nomecontato.get_full_name()}'


@admin.register(Fornecedor)
class FornecedorAdmin(admin.ModelAdmin):
    list_display = ('empresa', 'cnpj', 'telefone', 'email',)

    def empresa(self, instance):
        return f'{instance.empresa.get_full_name()}'


#urls.py raiz do projeto


from django.contrib import admin
from django.urls import path

urlpatterns = [
    path('admin/', admin.site.urls),
]

admin.site.site_header = 'Plataforma Administrativa da PYzza!'
admin.site.site_title = 'PYzza!'
admin.site.index_title = 'Sistema de Gerenciamento de PYzza!'





#models.py

from django.db import models


class Base(models.Model):
    criacao = models.DateTimeField(auto_now_add=True)
    atualizacao = models.DateTimeField(auto_now=True)
    ativo = models.BooleanField(default=True)

    class Meta:
        abstract = True


class Produto(Base):
    nome = models.CharField('Nome do Produto', max_length=100, help_text='nome do produto')
    categoria = models.CharField('Categoria', max_length=200, help_text='Ex: frios, massas')
    preco = models.DecimalField('Preço', max_digits=8, decimal_places=2, help_text='R$')
    medida = models.CharField('Medida', max_length=2, help_text='Ex: kg, Un')
    estoqueatual = models.IntegerField('Estoque Atual')
    estoqueminimo = models.IntegerField('Estoque Minimo')
    nomefornecedor = models.CharField('Nome do Empresa', max_length=100)
    situacaoestoque = models.CharField('Situação do Estoque', max_length=100, help_text='Ex: Regular/Negativo')

    class Meta:
        unique_together = ('nome', 'nomefornecedor',)


class Fornecedor(models.Model):
    empresa = models.ForeignKey(Produto,  on_delete=models.CASCADE)
    cnpj = models.CharField('CNPJ', max_length=18)
    produto = models.ForeignKey(Produto, on_delete=models.CASCADE)
    telefone = models.CharField('Telefone', max_length=12, help_text='Digite o numero do Telefone')
    email = models.EmailField('E-mail', max_length=100, help_text='Digite seu email')

    class Meta:
        unique_together = ('empresa', 'cnpj', 'telefone', 'email',)


class SituacaoEstoque(models.Model):
    pass


class RepresentanteComercial(models.Model):
    nomecontato = models.OneToOneField(Fornecedor,max_length=100, on_delete=models.CASCADE)
    endereco = models.CharField('Endereço', max_length=100)
    bairro = models.CharField('Bairro', max_length=100)
    cep = models.CharField('CEP', max_length=10)
    cidade = models.CharField('Cidade', max_length=20)
    estado = models.CharField('Estado', max_length=2)
    cpf = models.CharField('CPF', max_length=20)

    class Meta:
        unique_together = ('nomecontato', 'cpf',)

    def __str__(self):
        return self.nomecontato








